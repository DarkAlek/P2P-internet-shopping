<Controls:MetroWindow
                      xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                      xmlns:local="clr-namespace:client_desktop"
                      xmlns:convs="clr-namespace:client_desktop.Converters" 
                      xmlns:ViewModel="clr-namespace:client_desktop.Model.Models;assembly=client-desktop.Model" x:Class="client_desktop.MainWindow" x:Name="MyWindow"
                      mc:Ignorable="d"
                      Icon="pack://application:,,,/Icons/icon.png"
                      Title="AdminPanel" Height="538.644" Width="800" MinWidth="800"
    
                      BorderThickness="0" 
                      GlowBrush="Black"
                      ResizeMode="CanResizeWithGrip"

                      WindowTransitionsEnabled="False"
                      WindowStartupLocation="CenterScreen">

    <!--<Controls:MetroWindow.DataContext>
        <ViewModel:UsersWebViewModel/>
    </Controls:MetroWindow.DataContext>-->

    <Controls:MetroWindow.Resources>
        <convs:ObjectToTypeStringConverter x:Key="ObjectToTypeString"/>
        <convs:YesNoToBoolenCoverter x:Key="YesNoToBoolenCoverter"/>
    </Controls:MetroWindow.Resources>

    <Controls:MetroWindow.LeftWindowCommands>
        <Controls:WindowCommands>
            <ToggleButton  x:Name="control" Controls:ControlsHelper.ContentCharacterCasing="Normal" Content="ADD" Click="add_Click" Cursor="Hand">
                <ToggleButton.ContextMenu>
                    <ContextMenu x:Name="popup">
                        <MenuItem Header="Add Customer" Command="{Binding AddCustomerCmd}" Click="MenuItem_Click"/>
                        <MenuItem Header="Add Provider" Command="{Binding AddProviderCmd}" Click="MenuItem_Click"/>
                        <MenuItem Header="Add Admin" Command="{Binding AddAdminCmd}" Click="MenuItem_Click"/>
                    </ContextMenu>
                </ToggleButton.ContextMenu>
                <ToggleButton.Style>
                    <Style  BasedOn="{StaticResource AccentedSquareButtonStyle}" TargetType="ToggleButton">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt1}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt2}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt3}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            <ToggleButton Style="{StaticResource AccentedSquareButtonStyle}" Controls:ControlsHelper.ContentCharacterCasing="Normal" Content="EDIT" Click="edit_Click" IsEnabled="{Binding SelectedUser, Converter={StaticResource YesNoToBoolenCoverter}}" Cursor="Hand">
            </ToggleButton>
            <ToggleButton Style="{StaticResource AccentedSquareButtonStyle}" Controls:ControlsHelper.ContentCharacterCasing="Normal" Content="DELETE" IsEnabled="{Binding SelectedUser, Converter={StaticResource YesNoToBoolenCoverter}}"
        Command="{Binding DeleteUserCmd}" Cursor="Hand">
            </ToggleButton>
            <ToggleButton x:Name="refresh" Controls:ControlsHelper.ContentCharacterCasing="Normal" Content="REFRESH" Click="refresh_Click" Command="{Binding RefreshUsersCmd}" Cursor="Hand">
                <ToggleButton.Style>
                    <Style BasedOn="{StaticResource AccentedSquareButtonStyle}" TargetType="ToggleButton">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt1}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt2}" Value="False"/>
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt3}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="White"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
        </Controls:WindowCommands>
    </Controls:MetroWindow.LeftWindowCommands>


    <Controls:MetroWindow.Flyouts>
        <Controls:FlyoutsControl >
            <Controls:Flyout x:Name="EditWindow" Header="Edit User" Position="Bottom" Width="{Binding SystemParameters.PrimaryScreenWidth}" DataContext="{Binding SelectedUser}">
                <StackPanel>
                    <Label Content="_UserName:" Target="{Binding ElementName=UserName}" />
                    <TextBox x:Name="txt1" Controls:TextBoxHelper.Watermark="UserName" Margin="0 0 10 0" Controls:TextBoxHelper.ClearTextButton="True" MaxLength="35" Validation.Error="Validation_Error" Text="{Binding UpdateSourceTrigger=LostFocus, Path=UserName, 
                        ValidatesOnDataErrors=true, NotifyOnValidationError=true}" >
                    </TextBox>
                    <Label Content="_Email:" Target="{Binding ElementName=Email}" />
                    <TextBox  x:Name="txt2" Controls:TextBoxHelper.Watermark="Email" Margin="0 0 10 0" Controls:TextBoxHelper.ClearTextButton="True" MaxLength="35" Validation.Error="Validation_Error" Text="{Binding UpdateSourceTrigger=LostFocus, Path=Email, 
                        ValidatesOnDataErrors=true, NotifyOnValidationError=true}" >
                    </TextBox>
                    <Label Content="_PhoneNumber:" Target="{Binding ElementName=PhoneNumber}" />
                    <TextBox  x:Name="txt3" Controls:TextBoxHelper.Watermark="PhoneNumber" Margin="0 0 10 0" Controls:TextBoxHelper.ClearTextButton="True" MaxLength="15" Validation.Error="Validation_Error" Text="{Binding UpdateSourceTrigger=LostFocus, Path=PhoneNumber, 
                        ValidatesOnDataErrors=true, NotifyOnValidationError=true}" >
                    </TextBox>
                    <!--<Label Content="_Activated:" Target="{Binding ElementName=Activated}" />
                    <CheckBox Controls:TextBoxHelper.Watermark="Activated" Margin="0 0 10 10" Controls:TextBoxHelper.ClearTextButton="True" IsChecked="{Binding Activated}" >
                    </CheckBox>-->
                    <Button Command="{Binding ElementName=MyWindow, 
                          Path=DataContext.SaveUserCmd}" Content="Save" Width="125" Margin="0 10 5 5" HorizontalAlignment="Right">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                                <Setter Property="Foreground" Value="White" />
                                <Setter Property="IsEnabled" Value="False"/>
                                <Style.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt1}" Value="False"/>
                                            <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt2}" Value="False"/>
                                            <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt3}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="IsEnabled" Value="True"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>
            </Controls:Flyout>
        </Controls:FlyoutsControl>
    </Controls:MetroWindow.Flyouts>


    <Grid>
        <DataGrid x:Name="dataGrid" AutoGenerateColumns="False" CanUserAddRows="False" SelectedItem="{Binding SelectedUser}" ItemsSource="{Binding Users}">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Type" Width="*" IsReadOnly="True" Binding="{Binding Mode=OneWay, Converter={StaticResource ObjectToTypeString}}" />
                <DataGridTextColumn Header="UserName" Width="*" IsReadOnly="True" Binding="{Binding UserName}" />
                <DataGridTextColumn Header="Email" Width="*" IsReadOnly="True" Binding="{Binding Email}" />
                <DataGridTextColumn Header="PhoneNumber" Width="*" IsReadOnly="True" Binding="{Binding PhoneNumber}" />
                <DataGridTextColumn Header="Activated" Width="*" IsReadOnly="True" Binding="{Binding Activated}" />
            </DataGrid.Columns>
            <DataGrid.Style>
                <Style BasedOn="{StaticResource AzureDataGrid}" TargetType="DataGrid">
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt1}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt2}" Value="False"/>
                                <Condition Binding="{Binding Path=(Validation.HasError), ElementName=txt3}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Style>
        </DataGrid>
    </Grid>
</Controls:MetroWindow>